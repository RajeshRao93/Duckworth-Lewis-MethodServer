using System;
using DLMethodServer.Models;

namespace DLMethodServer.Services 
{
    public static class Service 
    {

        public static int CaluculateTargetScore(Inning1 inn1, Inning2 inn2)
        {
             ////*********************Target score calculation**************************////
            if (inn2.resourceR2 > inn1.resourceR1)
            {
                float target = inn1.scoredRuns + 245 * (inn2.resourceR2 - inn1.resourceR1) / 100 + 1;
                inn2.targetScore = (int)target;
            }
            else if (inn2.resourceR2 < inn1.resourceR1)
            {
                float target = inn1.scoredRuns * (inn2.resourceR2 / inn1.resourceR1) + 1;
                inn2.targetScore = (int)target;
            }
            else
            {
                inn2.targetScore = inn1.scoredRuns + 1;
            }

            return inn2.targetScore;
        }

        // Converts overs to balls
        public static int GetBalls(double oversLeft)
        {

            int wholePart = (int)oversLeft;
            float floatValue;
            string decimal_places = "";
            double overs;
            string str1 = oversLeft.ToString();
            var regex = new System.Text.RegularExpressions.Regex("(?<=[\\.])[0-9]+");
            if (regex.IsMatch(str1))
            {
                decimal_places = regex.Match(str1).Value;
                floatValue = float.Parse(decimal_places[0].ToString(), System.Globalization.CultureInfo.InvariantCulture.NumberFormat);
            }
            else
            {
                floatValue = 0;
            }

            overs = oversLeft;

            if (floatValue == 6)
            {
                wholePart++;
                overs = (int)oversLeft + 1;
                floatValue = 0;
            }

            return (int)((wholePart * 6) + (floatValue * 1));

        }

        //Calculating the resources of both innings
        //Can be made generic! I am just too lazy for that now. If its working don't touch it!!
        public static int CaluclateResourcesAndTarget(List<Inning> innings)
        {
            Inning1 in1 = new Inning1();
            Inning2 in2 = new Inning2();

            //********************Inning 1*********************************
            bool isInning1Interrupted = false;
            in1.oversAtStartN = innings[0].initialOvers_1;
            in1.resourceAtStart = getPercentile(GetBalls(in1.oversAtStartN), 0);
            for (int i = 0; i < innings[0].interruptions_1.Count; i++)
            {
                interrption.ballsLeft = GetBalls(innings[0].interruptions_1[i].oversLeft);
                interrption.wicketsLost = innings[0].interruptions_1[i].wicketsLost;
                interrption.oversLost = innings[0].interruptions_1[i].oversLost;

                if (interrption.oversLost != 0)
                {
                    in1.resourceAtSuspension = getPercentile(interrption.ballsLeft, interrption.wicketsLost);
                    int ballsRemaining = interrption.ballsLeft - GetBalls(interrption.oversLost);
                    in1.resourceAtResumption = getPercentile(ballsRemaining, interrption.wicketsLost);
                }

                in1.resourceR1 = in1.resourceAtStart - (in1.resourceAtSuspension - in1.resourceAtResumption);
                in1.resourceAtStart = in1.resourceR1;
                isInning1Interrupted = true;
            }

            in1.resourceR1 = isInning1Interrupted == true ? in1.resourceR1 : in1.resourceAtStart;
            in1.scoredRuns = innings[0].runsScored_1;

            //********************Inning 2*********************************
            bool isInning2Interrupted = false;
            in2.ballsAtStartN = GetBalls(innings[1].initialOvers_2);
            in2.resourceAtStart = getPercentile(in2.ballsAtStartN, 0);

            for (int j = 0; j < innings[1].interruptions_2.Count; j++)
            {
                interrption.ballsLeft = GetBalls(innings[1].interruptions_2[j].oversLeft);
                interrption.wicketsLost = innings[1].interruptions_2[j].wicketsLost; ;
                interrption.oversLost = innings[1].interruptions_2[j].oversLost;

                if (interrption.oversLost != 0)
                {
                    in2.resourceAtSuspension = getPercentile(interrption.ballsLeft, interrption.wicketsLost);
                    int ballsRemaining = interrption.ballsLeft - GetBalls(interrption.oversLost);
                    in2.resourceAtResumption = getPercentile(ballsRemaining, interrption.wicketsLost);
                }

                in2.resourceR2 = in2.resourceAtStart - (in2.resourceAtSuspension - in2.resourceAtResumption);
                in2.resourceAtStart = in2.resourceR2;
                isInning2Interrupted = true;
            }

            in2.resourceR2 = isInning2Interrupted == true ? in2.resourceR2 : in2.resourceAtStart;
            int targetScore = CaluculateTargetScore(in1, in2);

            return targetScore;
        }

        //Calculating the par score of team batting second
        public int CalculateParScore(List<Inning> request)
        {
            CaluclateResources(request);
            //Console.WriteLine("Enter the overs left for Team2 and wickets lost so far in the order");
            int ballsLeft = GetBalls(request[1].oversLeftAtTermination_2);
            int wicketLost = request[1].wicketsLostAtTermination_2;
            float resourceRemaining = getPercentile(ballsLeft, wicketLost);
            float resourcesUsed = in2.resourceR2 - resourceRemaining;
            int parScore = 0;
            if (resourcesUsed > in1.resourceR1)
            {
                float target = in1.scoredRuns + 245 * (resourcesUsed - in1.resourceR1) / 100;
                parScore = (int)target;
            }
            else if (resourcesUsed < in1.resourceR1)
            {
                float target = in1.scoredRuns * (resourcesUsed / in1.resourceR1);
                parScore = (int)target;
            }

            return parScore;
        }

        public static float getPercentile(int balls, int wickets)
        {
            Dictionary<int, string> constants = new Dictionary<int, string>();
            constants.Add(0, "0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00");
            constants.Add(1, "0.60,0.60,0.60,0.60,0.60,0.60,0.60,0.60,0.60,0.60,0.00");
            constants.Add(2, "1.20,1.20,1.20,1.20,1.20,1.20,1.20,1.20,1.20,1.10,0.00");
            constants.Add(3, "1.80,1.80,1.80,1.80,1.80,1.80,1.80,1.80,1.70,1.50,0.00");
            constants.Add(4, "2.40,2.40,2.40,2.40,2.40,2.40,2.40,2.30,2.20,1.90,0.00");
            constants.Add(5, "3.00,3.00,3.00,3.00,3.00,3.00,2.90,2.90,2.70,2.20,0.00");
            constants.Add(6, "3.60,3.60,3.60,3.60,3.60,3.50,3.50,3.40,3.20,2.50,0.00");
            constants.Add(7, "4.20,4.20,4.20,4.20,4.20,4.10,4.00,3.90,3.60,2.80,0.00");
            constants.Add(8, "4.80,4.80,4.80,4.80,4.70,4.70,4.60,4.40,4.00,3.00,0.00");
            constants.Add(9, "5.40,5.40,5.40,5.30,5.30,5.20,5.10,4.90,4.40,3.20,0.00");
            constants.Add(10, "6.00,6.00,5.90,5.90,5.90,5.80,5.60,5.30,4.80,3.40,0.00");
            constants.Add(11, "6.60,6.50,6.50,6.50,6.40,6.30,6.10,5.80,5.10,3.60,0.00");
            constants.Add(12, "7.20,7.10,7.10,7.00,7.00,6.80,6.60,6.20,5.50,3.70,0.00");
            constants.Add(13, "7.70,7.70,7.70,7.60,7.50,7.40,7.10,6.70,5.80,3.80,0.00");
            constants.Add(14, "8.30,8.30,8.20,8.20,8.00,7.90,7.60,7.10,6.10,3.90,0.00");
            constants.Add(15, "8.90,8.80,8.80,8.70,8.60,8.40,8.10,7.50,6.40,4.00,0.00");
            constants.Add(16, "9.40,9.40,9.30,9.30,9.10,8.90,8.50,7.90,6.70,4.10,0.00");
            constants.Add(17, "10.00,10.00,9.90,9.80,9.60,9.40,9.00,8.30,6.90,4.20,0.00");
            constants.Add(18, "10.60,10.50,10.40,10.30,10.20,9.90,9.50,8.70,7.20,4.20,0.00");
            constants.Add(19, "11.10,11.10,11.00,10.90,10.70,10.40,9.90,9.00,7.40,4.30,0.00");
            constants.Add(20, "11.70,11.60,11.50,11.40,11.20,10.90,10.30,9.40,7.70,4.30,0.00");
            constants.Add(21, "12.30,12.20,12.10,11.90,11.70,11.30,10.80,9.70,7.90,4.40,0.00");
            constants.Add(22, "12.80,12.70,12.60,12.50,12.20,11.80,11.20,10.10,8.10,4.40,0.00");
            constants.Add(23, "13.40,13.30,13.20,13.00,12.70,12.30,11.60,10.40,8.30,4.50,0.00");
            constants.Add(24, "13.90,13.80,13.70,13.50,13.20,12.70,12.00,10.70,8.40,4.50,0.00");
            constants.Add(25, "14.50,14.40,14.20,14.00,13.70,13.20,12.40,11.00,8.60,4.50,0.00");
            constants.Add(26, "15.00,14.90,14.70,14.50,14.20,13.60,12.80,11.30,8.80,4.50,0.00");
            constants.Add(27, "15.60,15.40,15.30,15.00,14.70,14.10,13.20,11.60,8.90,4.60,0.00");
            constants.Add(28, "16.10,16.00,15.80,15.50,15.10,14.50,13.60,11.90,9.10,4.60,0.00");
            constants.Add(29, "16.60,16.50,16.30,16.00,15.60,15.00,13.90,12.20,9.20,4.60,0.00");
            constants.Add(30, "17.20,17.00,16.80,16.50,16.10,15.40,14.30,12.50,9.40,4.60,0.00");
            constants.Add(31, "17.70,17.50,17.30,17.00,16.50,15.80,14.70,12.70,9.50,4.60,0.00");
            constants.Add(32, "18.20,18.10,17.80,17.50,17.00,16.20,15.00,13.00,9.60,4.60,0.00");
            constants.Add(33, "18.80,18.60,18.30,18.00,17.40,16.60,15.40,13.20,9.70,4.60,0.00");
            constants.Add(34, "19.30,19.10,18.80,18.50,17.90,17.00,15.70,13.50,9.80,4.60,0.00");
            constants.Add(35, "19.80,19.60,19.30,18.90,18.30,17.40,16.00,13.70,10.00,4.60,0.00");
            constants.Add(36, "20.30,20.10,19.80,19.40,18.80,17.80,16.40,13.90,10.10,4.60,0.00");
            constants.Add(37, "20.80,20.60,20.30,19.90,19.20,18.20,16.70,14.10,10.10,4.70,0.00");
            constants.Add(38, "21.40,21.10,20.80,20.30,19.70,18.60,17.00,14.40,10.20,4.70,0.00");
            constants.Add(39, "21.90,21.60,21.30,20.80,20.10,19.00,17.30,14.60,10.30,4.70,0.00");
            constants.Add(40, "22.40,22.10,21.80,21.30,20.50,19.40,17.60,14.80,10.40,4.70,0.00");
            constants.Add(41, "22.90,22.60,22.30,21.70,20.90,19.80,17.90,15.00,10.50,4.70,0.00");
            constants.Add(42, "23.40,23.10,22.70,22.20,21.40,20.10,18.20,15.20,10.50,4.70,0.00");
            constants.Add(43, "23.90,23.60,23.20,22.60,21.80,20.50,18.50,15.30,10.60,4.70,0.00");
            constants.Add(44, "24.40,24.10,23.70,23.10,22.20,20.90,18.80,15.50,10.70,4.70,0.00");
            constants.Add(45, "24.90,24.60,24.10,23.50,22.60,21.20,19.10,15.70,10.70,4.70,0.00");
            constants.Add(46, "25.40,25.10,24.60,24.00,23.00,21.60,19.40,15.90,10.80,4.70,0.00");
            constants.Add(47, "25.90,25.60,25.10,24.40,23.40,21.90,19.60,16.00,10.90,4.70,0.00");
            constants.Add(48, "26.40,26.00,25.50,24.80,23.80,22.30,19.90,16.20,10.90,4.70,0.00");
            constants.Add(49, "26.90,26.50,26.00,25.30,24.20,22.60,20.20,16.40,11.00,4.70,0.00");
            constants.Add(50, "27.40,27.00,26.40,25.70,24.60,22.90,20.40,16.50,11.00,4.70,0.00");
            constants.Add(51, "27.90,27.50,26.90,26.10,25.00,23.30,20.70,16.70,11.10,4.70,0.00");
            constants.Add(52, "28.30,27.90,27.30,26.50,25.30,23.60,20.90,16.80,11.10,4.70,0.00");
            constants.Add(53, "28.80,28.40,27.80,26.90,25.70,23.90,21.20,17.00,11.10,4.70,0.00");
            constants.Add(54, "29.30,28.90,28.20,27.40,26.10,24.20,21.40,17.10,11.20,4.70,0.00");
            constants.Add(55, "29.80,29.30,28.70,27.80,26.50,24.50,21.70,17.20,11.20,4.70,0.00");
            constants.Add(56, "30.30,29.80,29.10,28.20,26.80,24.90,21.90,17.40,11.30,4.70,0.00");
            constants.Add(57, "30.70,30.20,29.60,28.60,27.20,25.20,22.10,17.50,11.30,4.70,0.00");
            constants.Add(58, "31.20,30.70,30.00,29.00,27.60,25.50,22.30,17.60,11.30,4.70,0.00");
            constants.Add(59, "31.70,31.10,30.40,29.40,27.90,25.80,22.60,17.70,11.40,4.70,0.00");
            constants.Add(60, "32.10,31.60,30.80,29.80,28.30,26.10,22.80,17.90,11.40,4.70,0.00");
            constants.Add(61, "32.60,32.00,31.30,30.20,28.60,26.40,23.00,18.00,11.40,4.70,0.00");
            constants.Add(62, "33.10,32.50,31.70,30.60,29.00,26.60,23.20,18.10,11.40,4.70,0.00");
            constants.Add(63, "33.50,32.90,32.10,31.00,29.30,26.90,23.40,18.20,11.50,4.70,0.00");
            constants.Add(64, "34.00,33.40,32.50,31.40,29.70,27.20,23.60,18.30,11.50,4.70,0.00");
            constants.Add(65, "34.40,33.80,32.90,31.70,30.00,27.50,23.80,18.40,11.50,4.70,0.00");
            constants.Add(66, "34.90,34.20,33.40,32.10,30.40,27.80,24.00,18.50,11.50,4.70,0.00");
            constants.Add(67, "35.30,34.70,33.80,32.50,30.70,28.00,24.20,18.60,11.50,4.70,0.00");
            constants.Add(68, "35.80,35.10,34.20,32.90,31.00,28.30,24.40,18.70,11.60,4.70,0.00");
            constants.Add(69, "36.20,35.50,34.60,33.20,31.30,28.60,24.60,18.80,11.60,4.70,0.00");
            constants.Add(70, "36.70,36.00,35.00,33.60,31.70,28.80,24.80,18.90,11.60,4.70,0.00");
            constants.Add(71, "37.10,36.40,35.40,34.00,32.00,29.10,24.90,18.90,11.60,4.70,0.00");
            constants.Add(72, "37.60,36.80,35.80,34.30,32.30,29.40,25.10,19.00,11.60,4.70,0.00");
            constants.Add(73, "38.00,37.20,36.20,34.70,32.60,29.60,25.30,19.10,11.60,4.70,0.00");
            constants.Add(74, "38.50,37.70,36.60,35.10,32.90,29.90,25.50,19.20,11.70,4.70,0.00");
            constants.Add(75, "38.90,38.10,37.00,35.40,33.20,30.10,25.60,19.30,11.70,4.70,0.00");
            constants.Add(76, "39.30,38.50,37.40,35.80,33.60,30.40,25.80,19.30,11.70,4.70,0.00");
            constants.Add(77, "39.80,38.90,37.70,36.10,33.90,30.60,25.90,19.40,11.70,4.70,0.00");
            constants.Add(78, "40.20,39.30,38.10,36.50,34.20,30.80,26.10,19.50,11.70,4.70,0.00");
            constants.Add(79, "40.60,39.70,38.50,36.80,34.50,31.10,26.30,19.50,11.70,4.70,0.00");
            constants.Add(80, "41.00,40.10,38.90,37.20,34.80,31.30,26.40,19.60,11.70,4.70,0.00");
            constants.Add(81, "41.50,40.50,39.30,37.50,35.00,31.50,26.60,19.70,11.70,4.70,0.00");
            constants.Add(82, "41.90,40.90,39.60,37.90,35.30,31.80,26.70,19.70,11.80,4.70,0.00");
            constants.Add(83, "42.30,41.30,40.00,38.20,35.60,32.00,26.90,19.80,11.80,4.70,0.00");
            constants.Add(84, "42.70,41.70,40.40,38.50,35.90,32.20,27.00,19.90,11.80,4.70,0.00");
            constants.Add(85, "43.10,42.10,40.80,38.90,36.20,32.40,27.10,19.90,11.80,4.70,0.00");
            constants.Add(86, "43.50,42.50,41.10,39.20,36.50,32.60,27.30,20.00,11.80,4.70,0.00");
            constants.Add(87, "44.00,42.90,41.50,39.50,36.80,32.80,27.40,20.00,11.80,4.70,0.00");
            constants.Add(88, "44.40,43.30,41.80,39.80,37.00,33.10,27.50,20.10,11.80,4.70,0.00");
            constants.Add(89, "44.80,43.70,42.20,40.20,37.30,33.30,27.70,20.10,11.80,4.70,0.00");
            constants.Add(90, "45.20,44.10,42.60,40.50,37.60,33.50,27.80,20.20,11.80,4.70,0.00");
            constants.Add(91, "45.60,44.50,42.90,40.80,37.80,33.70,27.90,20.20,11.80,4.70,0.00");
            constants.Add(92, "46.00,44.80,43.30,41.10,38.10,33.90,28.10,20.30,11.80,4.70,0.00");
            constants.Add(93, "46.40,45.20,43.60,41.40,38.40,34.10,28.20,20.30,11.80,4.70,0.00");
            constants.Add(94, "46.80,45.60,44.00,41.70,38.60,34.30,28.30,20.40,11.80,4.70,0.00");
            constants.Add(95, "47.20,46.00,44.30,42.00,38.90,34.50,28.40,20.40,11.80,4.70,0.00");
            constants.Add(96, "47.60,46.30,44.70,42.30,39.10,34.70,28.50,20.50,11.80,4.70,0.00");
            constants.Add(97, "48.00,46.70,45.00,42.70,39.40,34.80,28.60,20.50,11.80,4.70,0.00");
            constants.Add(98, "48.40,47.10,45.40,43.00,39.60,35.00,28.80,20.50,11.90,4.70,0.00");
            constants.Add(99, "48.80,47.50,45.70,43.30,39.90,35.20,28.90,20.60,11.90,4.70,0.00");
            constants.Add(100, "49.20,47.80,46.00,43.60,40.10,35.40,29.00,20.60,11.90,4.70,0.00");
            constants.Add(101, "49.50,48.20,46.40,43.80,40.40,35.60,29.10,20.70,11.90,4.70,0.00");
            constants.Add(102, "49.90,48.50,46.70,44.10,40.60,35.80,29.20,20.70,11.90,4.70,0.00");
            constants.Add(103, "50.30,48.90,47.00,44.40,40.90,35.90,29.30,20.70,11.90,4.70,0.00");
            constants.Add(104, "50.70,49.30,47.40,44.70,41.10,36.10,29.40,20.80,11.90,4.70,0.00");
            constants.Add(105, "51.10,49.60,47.70,45.00,41.30,36.30,29.50,20.80,11.90,4.70,0.00");
            constants.Add(106, "51.50,50.00,48.00,45.30,41.60,36.40,29.60,20.80,11.90,4.70,0.00");
            constants.Add(107, "51.80,50.30,48.30,45.60,41.80,36.60,29.70,20.90,11.90,4.70,0.00");
            constants.Add(108, "52.20,50.70,48.60,45.90,42.00,36.80,29.80,20.90,11.90,4.70,0.00");
            constants.Add(109, "52.60,51.00,49.00,46.10,42.30,36.90,29.90,20.90,11.90,4.70,0.00");
            constants.Add(110, "52.90,51.40,49.30,46.40,42.50,37.10,30.00,21.00,11.90,4.70,0.00");
            constants.Add(111, "53.30,51.70,49.60,46.70,42.70,37.30,30.00,21.00,11.90,4.70,0.00");
            constants.Add(112, "53.70,52.10,49.90,47.00,42.90,37.40,30.10,21.00,11.90,4.70,0.00");
            constants.Add(113, "54.10,52.40,50.20,47.20,43.20,37.60,30.20,21.00,11.90,4.70,0.00");
            constants.Add(114, "54.40,52.80,50.50,47.50,43.40,37.70,30.30,21.10,11.90,4.70,0.00");
            constants.Add(115, "54.80,53.10,50.80,47.80,43.60,37.90,30.40,21.10,11.90,4.70,0.00");
            constants.Add(116, "55.10,53.40,51.10,48.00,43.80,38.00,30.50,21.10,11.90,4.70,0.00");
            constants.Add(117, "55.50,53.80,51.50,48.30,44.00,38.20,30.60,21.10,11.90,4.70,0.00");
            constants.Add(118, "55.90,54.10,51.80,48.60,44.20,38.30,30.60,21.20,11.90,4.70,0.00");
            constants.Add(119, "56.20,54.40,52.10,48.80,44.40,38.50,30.70,21.20,11.90,4.70,0.00");
            constants.Add(120, "56.60,54.80,52.40,49.10,44.60,38.60,30.80,21.20,11.90,4.70,0.00");
            constants.Add(121, "56.90,55.10,52.60,49.30,44.80,38.80,30.90,21.20,11.90,4.70,0.00");
            constants.Add(122, "57.30,55.40,52.90,49.60,45.00,38.90,30.90,21.20,11.90,4.70,0.00");
            constants.Add(123, "57.60,55.70,53.20,49.80,45.20,39.00,31.00,21.30,11.90,4.70,0.00");
            constants.Add(124, "58.00,56.10,53.50,50.10,45.40,39.20,31.10,21.30,11.90,4.70,0.00");
            constants.Add(125, "58.30,56.40,53.80,50.30,45.60,39.30,31.10,21.30,11.90,4.70,0.00");
            constants.Add(126, "58.70,56.70,54.10,50.60,45.80,39.40,31.20,21.30,11.90,4.70,0.00");
            constants.Add(127, "59.00,57.00,54.40,50.80,46.00,39.60,31.30,21.30,11.90,4.70,0.00");
            constants.Add(128, "59.30,57.30,54.70,51.10,46.20,39.70,31.40,21.40,11.90,4.70,0.00");
            constants.Add(129, "59.70,57.70,55.00,51.30,46.40,39.80,31.40,21.40,11.90,4.70,0.00");
            constants.Add(130, "60.00,58.00,55.20,51.50,46.60,40.00,31.50,21.40,11.90,4.70,0.00");
            constants.Add(131, "60.40,58.30,55.50,51.80,46.80,40.10,31.50,21.40,11.90,4.70,0.00");
            constants.Add(132, "60.70,58.60,55.80,52.00,47.00,40.20,31.60,21.40,11.90,4.70,0.00");
            constants.Add(133, "61.00,58.90,56.10,52.30,47.10,40.30,31.70,21.40,11.90,4.70,0.00");
            constants.Add(134, "61.40,59.20,56.30,52.50,47.30,40.40,31.70,21.50,11.90,4.70,0.00");
            constants.Add(135, "61.70,59.50,56.60,52.70,47.50,40.60,31.80,21.50,11.90,4.70,0.00");
            constants.Add(136, "62.00,59.80,56.90,52.90,47.70,40.70,31.80,21.50,11.90,4.70,0.00");
            constants.Add(137, "62.40,60.10,57.20,53.20,47.90,40.80,31.90,21.50,11.90,4.70,0.00");
            constants.Add(138, "62.70,60.40,57.40,53.40,48.00,40.90,32.00,21.50,11.90,4.70,0.00");
            constants.Add(139, "63.00,60.70,57.70,53.60,48.20,41.00,32.00,21.50,11.90,4.70,0.00");
            constants.Add(140, "63.30,61.00,58.00,53.80,48.40,41.10,32.10,21.50,11.90,4.70,0.00");
            constants.Add(141, "63.70,61.30,58.20,54.10,48.50,41.20,32.10,21.60,11.90,4.70,0.00");
            constants.Add(142, "64.00,61.60,58.50,54.30,48.70,41.40,32.20,21.60,11.90,4.70,0.00");
            constants.Add(143, "64.30,61.90,58.70,54.50,48.90,41.50,32.20,21.60,11.90,4.70,0.00");
            constants.Add(144, "64.60,62.20,59.00,54.70,49.00,41.60,32.30,21.60,11.90,4.70,0.00");
            constants.Add(145, "64.90,62.50,59.30,54.90,49.20,41.70,32.30,21.60,11.90,4.70,0.00");
            constants.Add(146, "65.20,62.80,59.50,55.20,49.40,41.80,32.40,21.60,11.90,4.70,0.00");
            constants.Add(147, "65.60,63.10,59.80,55.40,49.50,41.90,32.40,21.60,11.90,4.70,0.00");
            constants.Add(148, "65.90,63.30,60.00,55.60,49.70,42.00,32.50,21.60,11.90,4.70,0.00");
            constants.Add(149, "66.20,63.60,60.30,55.80,49.80,42.10,32.50,21.60,11.90,4.70,0.00");
            constants.Add(150, "66.50,63.90,60.50,56.00,50.00,42.20,32.60,21.60,11.90,4.70,0.00");
            constants.Add(151, "66.80,64.20,60.80,56.20,50.20,42.30,32.60,21.70,11.90,4.70,0.00");
            constants.Add(152, "67.10,64.50,61.00,56.40,50.30,42.40,32.60,21.70,11.90,4.70,0.00");
            constants.Add(153, "67.40,64.80,61.30,56.60,50.50,42.50,32.70,21.70,11.90,4.70,0.00");
            constants.Add(154, "67.70,65.00,61.50,56.80,50.60,42.60,32.70,21.70,11.90,4.70,0.00");
            constants.Add(155, "68.00,65.30,61.70,57.00,50.80,42.70,32.80,21.70,11.90,4.70,0.00");
            constants.Add(156, "68.30,65.60,62.00,57.20,50.90,42.80,32.80,21.70,11.90,4.70,0.00");
            constants.Add(157, "68.60,65.90,62.20,57.40,51.10,42.80,32.80,21.70,11.90,4.70,0.00");
            constants.Add(158, "68.90,66.10,62.50,57.60,51.20,42.90,32.90,21.70,11.90,4.70,0.00");
            constants.Add(159, "69.20,66.40,62.70,57.80,51.30,43.00,32.90,21.70,11.90,4.70,0.00");
            constants.Add(160, "69.50,66.70,62.90,58.00,51.50,43.10,33.00,21.70,11.90,4.70,0.00");
            constants.Add(161, "69.80,66.90,63.20,58.20,51.60,43.20,33.00,21.70,11.90,4.70,0.00");
            constants.Add(162, "70.10,67.20,63.40,58.40,51.80,43.30,33.00,21.70,11.90,4.70,0.00");
            constants.Add(163, "70.40,67.50,63.60,58.50,51.90,43.40,33.10,21.70,11.90,4.70,0.00");
            constants.Add(164, "70.70,67.70,63.90,58.70,52.00,43.40,33.10,21.80,11.90,4.70,0.00");
            constants.Add(165, "71.00,68.00,64.10,58.90,52.20,43.50,33.10,21.80,11.90,4.70,0.00");
            constants.Add(166, "71.30,68.20,64.30,59.10,52.30,43.60,33.20,21.80,11.90,4.70,0.00");
            constants.Add(167, "71.50,68.50,64.50,59.30,52.40,43.70,33.20,21.80,11.90,4.70,0.00");
            constants.Add(168, "71.80,68.80,64.80,59.50,52.60,43.80,33.20,21.80,11.90,4.70,0.00");
            constants.Add(169, "72.10,69.00,65.00,59.70,52.70,43.90,33.30,21.80,11.90,4.70,0.00");
            constants.Add(170, "72.40,69.30,65.20,59.80,52.80,43.90,33.30,21.80,11.90,4.70,0.00");
            constants.Add(171, "72.70,69.50,65.40,60.00,53.00,44.00,33.30,21.80,11.90,4.70,0.00");
            constants.Add(172, "73.00,69.80,65.60,60.20,53.10,44.10,33.40,21.80,11.90,4.70,0.00");
            constants.Add(173, "73.20,70.00,65.90,60.40,53.20,44.20,33.40,21.80,11.90,4.70,0.00");
            constants.Add(174, "73.50,70.30,66.10,60.50,53.40,44.20,33.40,21.80,11.90,4.70,0.00");
            constants.Add(175, "73.80,70.50,66.30,60.70,53.50,44.30,33.50,21.80,11.90,4.70,0.00");
            constants.Add(176, "74.10,70.80,66.50,60.90,53.60,44.40,33.50,21.80,11.90,4.70,0.00");
            constants.Add(177, "74.30,71.00,66.70,61.10,53.70,44.40,33.50,21.80,11.90,4.70,0.00");
            constants.Add(178, "74.60,71.30,66.90,61.20,53.80,44.50,33.50,21.80,11.90,4.70,0.00");
            constants.Add(179, "74.90,71.50,67.10,61.40,54.00,44.60,33.60,21.80,11.90,4.70,0.00");
            constants.Add(180, "75.10,71.80,67.30,61.60,54.10,44.70,33.60,21.80,11.90,4.70,0.00");
            constants.Add(181, "75.40,72.00,67.60,61.70,54.20,44.70,33.60,21.80,11.90,4.70,0.00");
            constants.Add(182, "75.70,72.20,67.80,61.90,54.30,44.80,33.60,21.80,11.90,4.70,0.00");
            constants.Add(183, "75.90,72.50,68.00,62.00,54.40,44.90,33.70,21.80,11.90,4.70,0.00");
            constants.Add(184, "76.20,72.70,68.20,62.20,54.50,44.90,33.70,21.90,11.90,4.70,0.00");
            constants.Add(185, "76.50,72.90,68.40,62.40,54.70,45.00,33.70,21.90,11.90,4.70,0.00");
            constants.Add(186, "76.70,73.20,68.60,62.50,54.80,45.10,33.70,21.90,11.90,4.70,0.00");
            constants.Add(187, "77.00,73.40,68.80,62.70,54.90,45.10,33.80,21.90,11.90,4.70,0.00");
            constants.Add(188, "77.30,73.60,69.00,62.80,55.00,45.20,33.80,21.90,11.90,4.70,0.00");
            constants.Add(189, "77.50,73.90,69.20,63.00,55.10,45.20,33.80,21.90,11.90,4.70,0.00");
            constants.Add(190, "77.80,74.10,69.40,63.20,55.20,45.30,33.80,21.90,11.90,4.70,0.00");
            constants.Add(191, "78.00,74.30,69.60,63.30,55.30,45.40,33.90,21.90,11.90,4.70,0.00");
            constants.Add(192, "78.30,74.60,69.70,63.50,55.40,45.40,33.90,21.90,11.90,4.70,0.00");
            constants.Add(193, "78.50,74.80,69.90,63.60,55.50,45.50,33.90,21.90,11.90,4.70,0.00");
            constants.Add(194, "78.80,75.00,70.10,63.80,55.60,45.50,33.90,21.90,11.90,4.70,0.00");
            constants.Add(195, "79.00,75.20,70.30,63.90,55.70,45.60,33.90,21.90,11.90,4.70,0.00");
            constants.Add(196, "79.30,75.50,70.50,64.10,55.80,45.70,34.00,21.90,11.90,4.70,0.00");
            constants.Add(197, "79.50,75.70,70.70,64.20,55.90,45.70,34.00,21.90,11.90,4.70,0.00");
            constants.Add(198, "79.80,75.90,70.90,64.40,56.00,45.80,34.00,21.90,11.90,4.70,0.00");
            constants.Add(199, "80.00,76.10,71.10,64.50,56.10,45.80,34.00,21.90,11.90,4.70,0.00");
            constants.Add(200, "80.30,76.30,71.30,64.60,56.20,45.90,34.00,21.90,11.90,4.70,0.00");
            constants.Add(201, "80.50,76.60,71.40,64.80,56.30,45.90,34.10,21.90,11.90,4.70,0.00");
            constants.Add(202, "80.80,76.80,71.60,64.90,56.40,46.00,34.10,21.90,11.90,4.70,0.00");
            constants.Add(203, "81.00,77.00,71.80,65.10,56.50,46.00,34.10,21.90,11.90,4.70,0.00");
            constants.Add(204, "81.30,77.20,72.00,65.20,56.60,46.10,34.10,21.90,11.90,4.70,0.00");
            constants.Add(205, "81.50,77.40,72.20,65.30,56.70,46.10,34.10,21.90,11.90,4.70,0.00");
            constants.Add(206, "81.70,77.60,72.30,65.50,56.80,46.20,34.20,21.90,11.90,4.70,0.00");
            constants.Add(207, "82.00,77.80,72.50,65.60,56.90,46.20,34.20,21.90,11.90,4.70,0.00");
            constants.Add(208, "82.20,78.00,72.70,65.80,57.00,46.30,34.20,21.90,11.90,4.70,0.00");
            constants.Add(209, "82.50,78.30,72.90,65.90,57.10,46.30,34.20,21.90,11.90,4.70,0.00");
            constants.Add(210, "82.70,78.50,73.00,66.00,57.20,46.40,34.20,21.90,11.90,4.70,0.00");
            constants.Add(211, "82.90,78.70,73.20,66.20,57.30,46.40,34.20,21.90,11.90,4.70,0.00");
            constants.Add(212, "83.20,78.90,73.40,66.30,57.40,46.50,34.20,21.90,11.90,4.70,0.00");
            constants.Add(213, "83.40,79.10,73.60,66.40,57.40,46.50,34.30,21.90,11.90,4.70,0.00");
            constants.Add(214, "83.60,79.30,73.70,66.60,57.50,46.60,34.30,21.90,11.90,4.70,0.00");
            constants.Add(215, "83.80,79.50,73.90,66.70,57.60,46.60,34.30,21.90,11.90,4.70,0.00");
            constants.Add(216, "84.10,79.70,74.10,66.80,57.70,46.60,34.30,21.90,11.90,4.70,0.00");
            constants.Add(217, "84.30,79.90,74.20,66.90,57.80,46.70,34.30,21.90,11.90,4.70,0.00");
            constants.Add(218, "84.50,80.10,74.40,67.10,57.90,46.70,34.30,21.90,11.90,4.70,0.00");
            constants.Add(219, "84.80,80.30,74.60,67.20,58.00,46.80,34.30,21.90,11.90,4.70,0.00");
            constants.Add(220, "85.00,80.50,74.70,67.30,58.00,46.80,34.40,21.90,11.90,4.70,0.00");
            constants.Add(221, "85.20,80.70,74.90,67.40,58.10,46.90,34.40,21.90,11.90,4.70,0.00");
            constants.Add(222, "85.40,80.90,75.00,67.60,58.20,46.90,34.40,21.90,11.90,4.70,0.00");
            constants.Add(223, "85.60,81.10,75.20,67.70,58.30,46.90,34.40,21.90,11.90,4.70,0.00");
            constants.Add(224, "85.90,81.30,75.40,67.80,58.40,47.00,34.40,21.90,11.90,4.70,0.00");
            constants.Add(225, "86.10,81.50,75.50,67.90,58.40,47.00,34.40,21.90,11.90,4.70,0.00");
            constants.Add(226, "86.30,81.60,75.70,68.00,58.50,47.10,34.40,21.90,11.90,4.70,0.00");
            constants.Add(227, "86.50,81.80,75.80,68.20,58.60,47.10,34.40,21.90,11.90,4.70,0.00");
            constants.Add(228, "86.70,82.00,76.00,68.30,58.70,47.10,34.50,21.90,11.90,4.70,0.00");
            constants.Add(229, "87.00,82.20,76.20,68.40,58.80,47.20,34.50,21.90,11.90,4.70,0.00");
            constants.Add(230, "87.20,82.40,76.30,68.50,58.80,47.20,34.50,21.90,11.90,4.70,0.00");
            constants.Add(231, "87.40,82.60,76.50,68.60,58.90,47.30,34.50,21.90,11.90,4.70,0.00");
            constants.Add(232, "87.60,82.80,76.60,68.70,59.00,47.30,34.50,21.90,11.90,4.70,0.00");
            constants.Add(233, "87.80,83.00,76.80,68.90,59.00,47.30,34.50,21.90,11.90,4.70,0.00");
            constants.Add(234, "88.00,83.10,76.90,69.00,59.10,47.40,34.50,22.00,11.90,4.70,0.00");
            constants.Add(235, "88.20,83.30,77.10,69.10,59.20,47.40,34.50,22.00,11.90,4.70,0.00");
            constants.Add(236, "88.40,83.50,77.20,69.20,59.30,47.40,34.50,22.00,11.90,4.70,0.00");
            constants.Add(237, "88.60,83.70,77.40,69.30,59.30,47.50,34.60,22.00,11.90,4.70,0.00");
            constants.Add(238, "88.90,83.90,77.50,69.40,59.40,47.50,34.60,22.00,11.90,4.70,0.00");
            constants.Add(239, "89.10,84.00,77.70,69.50,59.50,47.50,34.60,22.00,11.90,4.70,0.00");
            constants.Add(240, "89.30,84.20,77.80,69.60,59.50,47.60,34.60,22.00,11.90,4.70,0.00");
            constants.Add(241, "89.50,84.40,77.90,69.70,59.60,47.60,34.60,22.00,11.90,4.70,0.00");
            constants.Add(242, "89.70,84.60,78.10,69.80,59.70,47.60,34.60,22.00,11.90,4.70,0.00");
            constants.Add(243, "89.90,84.70,78.20,69.90,59.70,47.70,34.60,22.00,11.90,4.70,0.00");
            constants.Add(244, "90.10,84.90,78.40,70.10,59.80,47.70,34.60,22.00,11.90,4.70,0.00");
            constants.Add(245, "90.30,85.10,78.50,70.20,59.90,47.70,34.60,22.00,11.90,4.70,0.00");
            constants.Add(246, "90.50,85.30,78.70,70.30,59.90,47.80,34.60,22.00,11.90,4.70,0.00");
            constants.Add(247, "90.70,85.40,78.80,70.40,60.00,47.80,34.60,22.00,11.90,4.70,0.00");
            constants.Add(248, "90.90,85.60,78.90,70.50,60.10,47.80,34.70,22.00,11.90,4.70,0.00");
            constants.Add(249, "91.10,85.80,79.10,70.60,60.10,47.80,34.70,22.00,11.90,4.70,0.00");
            constants.Add(250, "91.30,85.90,79.20,70.70,60.20,47.90,34.70,22.00,11.90,4.70,0.00");
            constants.Add(251, "91.50,86.10,79.30,70.80,60.30,47.90,34.70,22.00,11.90,4.70,0.00");
            constants.Add(252, "91.70,86.30,79.50,70.90,60.30,47.90,34.70,22.00,11.90,4.70,0.00");
            constants.Add(253, "91.80,86.40,79.60,71.00,60.40,48.00,34.70,22.00,11.90,4.70,0.00");
            constants.Add(254, "92.00,86.60,79.70,71.10,60.40,48.00,34.70,22.00,11.90,4.70,0.00");
            constants.Add(255, "92.20,86.80,79.90,71.20,60.50,48.00,34.70,22.00,11.90,4.70,0.00");
            constants.Add(256, "92.40,86.90,80.00,71.30,60.60,48.00,34.70,22.00,11.90,4.70,0.00");
            constants.Add(257, "92.60,87.10,80.10,71.30,60.60,48.10,34.70,22.00,11.90,4.70,0.00");
            constants.Add(258, "92.80,87.30,80.30,71.40,60.70,48.10,34.70,22.00,11.90,4.70,0.00");
            constants.Add(259, "93.00,87.40,80.40,71.50,60.70,48.10,34.70,22.00,11.90,4.70,0.00");
            constants.Add(260, "93.20,87.60,80.50,71.60,60.80,48.10,34.70,22.00,11.90,4.70,0.00");
            constants.Add(261, "93.40,87.70,80.70,71.70,60.80,48.20,34.70,22.00,11.90,4.70,0.00");
            constants.Add(262, "93.50,87.90,80.80,71.80,60.90,48.20,34.80,22.00,11.90,4.70,0.00");
            constants.Add(263, "93.70,88.10,80.90,71.90,61.00,48.20,34.80,22.00,11.90,4.70,0.00");
            constants.Add(264, "93.90,88.20,81.00,72.00,61.00,48.30,34.80,22.00,11.90,4.70,0.00");
            constants.Add(265, "94.10,88.40,81.20,72.10,61.10,48.30,34.80,22.00,11.90,4.70,0.00");
            constants.Add(266, "94.30,88.50,81.30,72.20,61.10,48.30,34.80,22.00,11.90,4.70,0.00");
            constants.Add(267, "94.50,88.70,81.40,72.30,61.20,48.30,34.80,22.00,11.90,4.70,0.00");
            constants.Add(268, "94.60,88.80,81.50,72.40,61.20,48.30,34.80,22.00,11.90,4.70,0.00");
            constants.Add(269, "94.80,89.00,81.70,72.40,61.30,48.40,34.80,22.00,11.90,4.70,0.00");
            constants.Add(270, "95.00,89.10,81.80,72.50,61.30,48.40,34.80,22.00,11.90,4.70,0.00");
            constants.Add(271, "95.20,89.30,81.90,72.60,61.40,48.40,34.80,22.00,11.90,4.70,0.00");
            constants.Add(272, "95.40,89.40,82.00,72.70,61.40,48.40,34.80,22.00,11.90,4.70,0.00");
            constants.Add(273, "95.50,89.60,82.10,72.80,61.50,48.50,34.80,22.00,11.90,4.70,0.00");
            constants.Add(274, "95.70,89.70,82.30,72.90,61.50,48.50,34.80,22.00,11.90,4.70,0.00");
            constants.Add(275, "95.90,89.90,82.40,73.00,61.60,48.50,34.80,22.00,11.90,4.70,0.00");
            constants.Add(276, "96.10,90.00,82.50,73.00,61.60,48.50,34.80,22.00,11.90,4.70,0.00");
            constants.Add(277, "96.20,90.20,82.60,73.10,61.70,48.50,34.80,22.00,11.90,4.70,0.00");
            constants.Add(278, "96.40,90.30,82.70,73.20,61.70,48.60,34.80,22.00,11.90,4.70,0.00");
            constants.Add(279, "96.60,90.50,82.80,73.30,61.80,48.60,34.80,22.00,11.90,4.70,0.00");
            constants.Add(280, "96.70,90.60,82.90,73.40,61.80,48.60,34.90,22.00,11.90,4.70,0.00");
            constants.Add(281, "96.90,90.80,83.10,73.40,61.90,48.60,34.90,22.00,11.90,4.70,0.00");
            constants.Add(282, "97.10,90.90,83.20,73.50,61.90,48.60,34.90,22.00,11.90,4.70,0.00");
            constants.Add(283, "97.30,91.00,83.30,73.60,62.00,48.70,34.90,22.00,11.90,4.70,0.00");
            constants.Add(284, "97.40,91.20,83.40,73.70,62.00,48.70,34.90,22.00,11.90,4.70,0.00");
            constants.Add(285, "97.60,91.30,83.50,73.80,62.10,48.70,34.90,22.00,11.90,4.70,0.00");
            constants.Add(286, "97.80,91.50,83.60,73.80,62.10,48.70,34.90,22.00,11.90,4.70,0.00");
            constants.Add(287, "97.90,91.60,83.70,73.90,62.20,48.70,34.90,22.00,11.90,4.70,0.00");
            constants.Add(288, "98.10,91.70,83.80,74.00,62.20,48.80,34.90,22.00,11.90,4.70,0.00");
            constants.Add(289, "98.20,91.90,83.90,74.10,62.20,48.80,34.90,22.00,11.90,4.70,0.00");
            constants.Add(290, "98.40,92.00,84.00,74.10,62.30,48.80,34.90,22.00,11.90,4.70,0.00");
            constants.Add(291, "98.60,92.20,84.20,74.20,62.30,48.80,34.90,22.00,11.90,4.70,0.00");
            constants.Add(292, "98.70,92.30,84.30,74.30,62.40,48.80,34.90,22.00,11.90,4.70,0.00");
            constants.Add(293, "98.90,92.40,84.40,74.40,62.40,48.90,34.90,22.00,11.90,4.70,0.00");
            constants.Add(294, "99.10,92.60,84.50,74.40,62.50,48.90,34.90,22.00,11.90,4.70,0.00");
            constants.Add(295, "99.20,92.70,84.60,74.50,62.50,48.90,34.90,22.00,11.90,4.70,0.00");
            constants.Add(296, "99.40,92.80,84.70,74.60,62.50,48.90,34.90,22.00,11.90,4.70,0.00");
            constants.Add(297, "99.50,93.00,84.80,74.60,62.60,48.90,34.90,22.00,11.90,4.70,0.00");
            constants.Add(298, "99.70,93.10,84.90,74.70,62.60,48.90,34.90,22.00,11.90,4.70,0.00");
            constants.Add(299, "99.80,93.20,85.00,74.80,62.70,49.00,34.90,22.00,11.90,4.70,0.00");
            constants.Add(300, "100.00,93.40,85.10,74.90,62.70,49.00,34.90,22.00,11.90,4.70,0.00");
            string temp = constants[balls];

            string[] temp_list = temp.Split(',');

            string percentile = temp_list[wickets];

            float resource = float.Parse(percentile);

            return resource;
        }
    }
}
